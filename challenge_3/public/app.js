class App extends React.Component {
  constructor() {
    super(); // 0 = homepage, 1 = F1, 2 = F2, 3 = F3

    this.state = {
      formState: 0,
      name: '',
      email: '',
      password: '',
      street: '',
      city: '',
      state: '',
      zipcode: '',
      creditCard: '',
      expiryDate: '',
      CVV: '',
      billingZipcode: ''
    };
    this.handleFormState = this.handleFormState.bind(this);
  } //update state function


  handleFormState(stateObj) {
    this.setState(stateObj);
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(FormHandler, {
      details: this.state,
      formState: this.state.formState,
      handleFormState: this.handleFormState
    }));
  }

} //********************* FormHandler Render *****************************/


class FormHandler extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    if (this.props.formState === 0) {
      return /*#__PURE__*/React.createElement(Homepage, {
        handleFormState: this.props.handleFormState
      });
    }

    if (this.props.formState === 1) {
      return /*#__PURE__*/React.createElement(F1, {
        handleFormState: this.props.handleFormState
      });
    }

    if (this.props.formState === 2) {
      return /*#__PURE__*/React.createElement(F2, {
        details: this.props.details,
        handleFormState: this.props.handleFormState
      });
    }

    if (this.props.formState === 3) {
      return /*#__PURE__*/React.createElement(F3, {
        details: this.props.details,
        handleFormState: this.props.handleFormState
      });
    }

    if (this.props.formState === 4) {
      return /*#__PURE__*/React.createElement(Purchased, {
        details: this.props.details,
        handleFormState: this.props.handleFormState
      });
    }
  }

} //********************* Homepage *****************************/


class Homepage extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h1", null, "HomePage!"), /*#__PURE__*/React.createElement("button", {
      onClick: () => {
        this.props.handleFormState({
          formState: 1
        });
      }
    }, "Checkout"));
  }

} //********************* F1 *****************************/


class F1 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: '',
      email: '',
      password: '',
      formState: 2
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleSubmit(event) {
    // axios post request
    event.preventDefault();
    axios({
      method: 'post',
      url: 'http://localhost:3000/details/',
      data: {
        name: this.state.name,
        email: this.state.email,
        password: this.state.password
      }
    }).then(response => {
      console.log('Client sucess');
      this.props.handleFormState(this.state);
    }).catch(err => console.log(err));
  }

  handleChange(event) {
    console.log(event.target.name);
    this.setState({
      [event.target.name]: event.target.value
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h1", null, "User Details: f1"), /*#__PURE__*/React.createElement("form", {
      onSubmit: this.handleSubmit
    }, /*#__PURE__*/React.createElement("label", null, "Name:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "name",
      onChange: this.handleChange
    })), /*#__PURE__*/React.createElement("label", null, "Email:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "email",
      onChange: this.handleChange
    })), /*#__PURE__*/React.createElement("label", null, "Password:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "password",
      onChange: this.handleChange
    }))), /*#__PURE__*/React.createElement("button", {
      onClick: this.handleSubmit
    }, "Next"));
  }

} //********************* F2 *****************************/


class F2 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      street: '',
      city: '',
      state: '',
      zipcode: '',
      formState: 3
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleSubmit(event) {
    // axios post request
    event.preventDefault();
    axios({
      method: 'put',
      url: 'http://localhost:3000/details/',
      data: {
        street: this.state.street,
        city: this.state.city,
        state: this.state.state,
        zipcode: this.state.zipcode,
        name: this.props.details.name
      }
    }).then(response => {
      console.log('Client PUT sucess');
      this.props.handleFormState(this.state);
    }).catch(err => console.log('Put', err));
  }

  handleChange(event) {
    console.log(event.target.name);
    this.setState({
      [event.target.name]: event.target.value
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h1", null, "Address Details: f2"), /*#__PURE__*/React.createElement("form", {
      onSubmit: this.handleSubmit
    }, /*#__PURE__*/React.createElement("label", null, "Street:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "street",
      onChange: this.handleChange
    })), /*#__PURE__*/React.createElement("label", null, "City:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "city",
      onChange: this.handleChange
    })), /*#__PURE__*/React.createElement("label", null, "State:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "state",
      onChange: this.handleChange
    })), /*#__PURE__*/React.createElement("label", null, "Zipcode:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "zipcode",
      onChange: this.handleChange
    }))), /*#__PURE__*/React.createElement("button", {
      onClick: this.handleSubmit
    }, "Next"));
  }

} //********************* F3 *****************************/


class F3 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      creditCard: '',
      expiryDate: '',
      CVV: '',
      billingZipcode: '',
      formState: 4
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleSubmit(event) {
    // axios post request
    event.preventDefault();
    axios({
      method: 'put',
      url: 'http://localhost:3000/details/',
      data: {
        creditCard: this.state.street,
        expiryDate: this.state.city,
        CVV: this.state.state,
        billingZipcode: this.state.zipcode,
        name: this.props.details.name
      }
    }).then(response => {
      console.log('Client PUT sucess');
      this.props.handleFormState(this.state);
    }).catch(err => console.log('Put', err));
  }

  handleChange(event) {
    console.log(event.target.name);
    this.setState({
      [event.target.name]: event.target.value
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h1", null, "Credit Card Details: f3"), /*#__PURE__*/React.createElement("form", {
      onSubmit: this.handleSubmit
    }, /*#__PURE__*/React.createElement("label", null, "Credit Card Number:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "creditCard",
      onChange: this.handleChange
    })), /*#__PURE__*/React.createElement("label", null, "Expiration Date:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "expiryDate",
      onChange: this.handleChange
    })), /*#__PURE__*/React.createElement("label", null, "CVV:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "CVV",
      onChange: this.handleChange
    })), /*#__PURE__*/React.createElement("label", null, "Billing Zipcode:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "billingZipcode",
      onChange: this.handleChange
    }))), /*#__PURE__*/React.createElement("button", {
      onClick: this.handleSubmit
    }, "Next"));
  }

} //********************* Confirmation *****************************/


class Purchased extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  componentDidMount() {
    axios({
      method: 'get',
      url: 'http://localhost:3000/details/',
      params: {
        name: this.props.details.name
      }
    }).then(response => {
      console.log("WOOT", response.data);
      this.setState({
        details: response.data
      });
    });
  }

  handleSubmit(event) {
    event.preventDefault();
    this.props.handleFormState({
      formState: 0
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h1", null, "Confirmation!"), /*#__PURE__*/React.createElement("h4", null, this.state.details.name), /*#__PURE__*/React.createElement("button", {
      onClick: this.handleSubmit
    }, "Purchased"));
  }

}

ReactDOM.render( /*#__PURE__*/React.createElement(App, null), document.getElementById('app'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,